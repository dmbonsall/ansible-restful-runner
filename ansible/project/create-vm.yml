# Few odd things about this:
# 1) Alma doesn't seem to update their generic cloud image frequently, so it make take a while to configure
#    since it may need to update major things like the kernel....
# 2) There are a few delays to let things catch up. They are noted where applicable
---
- name: Create a new VM based on an image template and a cloud-init configuration.
  hosts: pve_servers

  tasks:
  - name: Download the latest image
    pull_latest_image:
      image_url: '{{ remote_image_path }}'
    register: pull_result

  - name: Copy the user-data template to the pve_host
    template:
      src: user-data.j2
      dest: /snippets/snippets/user-data

  - name: Copy the network template to the pve_host
    template:
      src: network.j2
      dest: /snippets/snippets/network

  - name: Create the VM
    community.general.proxmox_kvm:
      api_host: '{{ ansible_host }}'
      api_user: '{{ api_user }}@pam'
      api_token_id: '{{ api_token_id }}'
      api_token_secret: '{{ api_token_secret }}'
      node: '{{ inventory_hostname }}'
      timeout: 500
      name: '{{ vm_name }}'
      net:
        net0: 'virtio,bridge=vmbr0'
      memory: '{{ vm_memory }}'
      cores: '{{ vm_cores }}'
      serial:
        serial0: socket
      vga: serial0
      agent: yes
    delegate_to: localhost
    register: create_output

  - name: Import the disk
    shell: 'qm importdisk {{ create_output.vmid }} {{ pull_result.image_path }} local-lvm'

  - name: Set the imported disk to scsi0
    shell: 'qm set {{ create_output.vmid }} --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-{{ create_output.vmid }}-disk-0'

  - name: Resize scsi0
    shell: 'qm resize {{ create_output.vmid }} scsi0 {{ vm_disk_gib }}G'

  # proxmox_kvm module cannot do this for some reason, so we have to do it here
  - name: Create the cloudinit drive
    shell: 'qm set {{ create_output.vmid }} --ide2 local-lvm:cloudinit'

  - name: Set boot disk and cicustom line
    community.general.proxmox_kvm:
      api_host: '{{ ansible_host }}'
      api_user: '{{ api_user }}@pam'
      api_token_id: '{{ api_token_id }}'
      api_token_secret: '{{ api_token_secret }}'
      node: '{{ inventory_hostname }}'
      timeout: 500
      name: '{{ vm_name }}'
      boot: c
      bootdisk: scsi0
      cicustom: 'user=snippets:snippets/user-data,network=snippets:snippets/network'
      update: yes
    delegate_to: localhost

  - name: Start the VM
    community.general.proxmox_kvm:
      api_host: '{{ ansible_host }}'
      api_user: '{{ api_user }}@pam'
      api_token_id: '{{ api_token_id }}'
      api_token_secret: '{{ api_token_secret }}'
      node: '{{ inventory_hostname }}'
      name: '{{ vm_name }}'
      state: started
    delegate_to: localhost

  - name: Wait for cloudinit to shutdown the VM
    wait_for:
      timeout: 600
      path: /var/run/qemu-server/{{ create_output.vmid }}.pid
      state: absent

  - name: Delete the cloudinit drive so it doensn't run again or take up space
    shell: 'qm unlink {{ create_output.vmid }} --idlist=ide2 --force=1'

  # This delay is needed otherwise the VM doesn't start sometimes
  - name: Wait 5 seconds for PVE to catch up...
    wait_for:
      timeout: 5

  - name: Start the VM Again
    community.general.proxmox_kvm:
      api_host: '{{ ansible_host }}'
      api_user: '{{ api_user }}@pam'
      api_token_id: '{{ api_token_id }}'
      api_token_secret: '{{ api_token_secret }}'
      node: '{{ inventory_hostname }}'
      name: '{{ vm_name }}'
      state: started
    delegate_to: localhost

  - name: Wait 15 seconds for the guest VM to come up
    wait_for:
      timeout: 15

  - name: Get the IP address of the VM
    shell: 'qm agent {{ create_output.vmid }} network-get-interfaces'
    register: agent_output

  - name: Print the IPv4 addresses on all interfaces
    debug:
      msg: '{{ agent_output.stdout | from_json | json_query(query_string) }}'
    vars:
      query_string: "@[*].\"ip-addresses\"[?\"ip-address-type\" == 'ipv4'].\"ip-address\"[]"

# vim: ts=2 sw=2 ai:
